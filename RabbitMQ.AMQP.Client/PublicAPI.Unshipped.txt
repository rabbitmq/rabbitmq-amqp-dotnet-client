#nullable enable
abstract RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.CloseAsync() -> System.Threading.Tasks.Task!
abstract RabbitMQ.AMQP.Client.Impl.StreamOptions.Builder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
const RabbitMQ.AMQP.Client.Consts.Bindings = "bindings" -> string!
const RabbitMQ.AMQP.Client.Consts.DefaultMaxFrameSize = 0 -> uint
const RabbitMQ.AMQP.Client.Consts.DefaultVirtualHost = "/" -> string!
const RabbitMQ.AMQP.Client.Consts.Exchanges = "exchanges" -> string!
const RabbitMQ.AMQP.Client.Consts.Key = "key" -> string!
const RabbitMQ.AMQP.Client.Consts.Messages = "messages" -> string!
const RabbitMQ.AMQP.Client.Consts.Queues = "queues" -> string!
const RabbitMQ.AMQP.Client.MetricsReporter.MeterName = "RabbitMQ.Amqp" -> string!
const RabbitMQ.AMQP.Client.MetricsReporter.MetricPrefix = "rabbitmq.amqp" -> string!
override RabbitMQ.AMQP.Client.BackOffDelayPolicy.ToString() -> string!
override RabbitMQ.AMQP.Client.ByteCapacity.Equals(object? obj) -> bool
override RabbitMQ.AMQP.Client.ByteCapacity.GetHashCode() -> int
override RabbitMQ.AMQP.Client.ClusterConnectionSettings.Equals(object? obj) -> bool
override RabbitMQ.AMQP.Client.ClusterConnectionSettings.GetHashCode() -> int
override RabbitMQ.AMQP.Client.ConnectionSettings.Equals(object? obj) -> bool
override RabbitMQ.AMQP.Client.ConnectionSettings.GetHashCode() -> int
override RabbitMQ.AMQP.Client.ConnectionSettings.ToString() -> string!
override RabbitMQ.AMQP.Client.Error.ToString() -> string!
override RabbitMQ.AMQP.Client.Impl.AmqpConnection.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpConnection.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpConnection.ToString() -> string!
override RabbitMQ.AMQP.Client.Impl.AmqpConsumer.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpConsumer.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpConsumer.ToString() -> string!
override RabbitMQ.AMQP.Client.Impl.AmqpManagement.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpManagement.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpManagement.ToString() -> string!
override RabbitMQ.AMQP.Client.Impl.AmqpPublisher.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpPublisher.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpPublisher.ToString() -> string!
override RabbitMQ.AMQP.Client.Impl.AmqpRpcClient.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpRpcClient.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpRpcServer.CloseAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.AmqpRpcServer.OpenAsync() -> System.Threading.Tasks.Task!
override RabbitMQ.AMQP.Client.Impl.ConsumerBuilderStreamOptions.Builder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
override RabbitMQ.AMQP.Client.Impl.ListenerStreamOptions.Builder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
override RabbitMQ.AMQP.Client.RecoveryConfiguration.ToString() -> string!
override RabbitMQ.AMQP.Client.SaslMechanism.Equals(object? obj) -> bool
override RabbitMQ.AMQP.Client.SaslMechanism.GetHashCode() -> int
RabbitMQ.AMQP.Client.BackOffDelayPolicy
RabbitMQ.AMQP.Client.BackOffDelayPolicy.BackOffDelayPolicy() -> void
RabbitMQ.AMQP.Client.BackOffDelayPolicy.BackOffDelayPolicy(int maxAttempt) -> void
RabbitMQ.AMQP.Client.BackOffDelayPolicy.CurrentAttempt.get -> int
RabbitMQ.AMQP.Client.BackOffDelayPolicy.Delay() -> int
RabbitMQ.AMQP.Client.BackOffDelayPolicy.IsActive() -> bool
RabbitMQ.AMQP.Client.BackOffDelayPolicy.Reset() -> void
RabbitMQ.AMQP.Client.BadRequestException
RabbitMQ.AMQP.Client.BadRequestException.BadRequestException(string! message) -> void
RabbitMQ.AMQP.Client.ByteCapacity
RabbitMQ.AMQP.Client.ByteCapacity.ByteCapacity(long bytes) -> void
RabbitMQ.AMQP.Client.ByteCapacity.Equals(RabbitMQ.AMQP.Client.ByteCapacity? obj) -> bool
RabbitMQ.AMQP.Client.ClassicQueueMode
RabbitMQ.AMQP.Client.ClassicQueueMode.Default = 0 -> RabbitMQ.AMQP.Client.ClassicQueueMode
RabbitMQ.AMQP.Client.ClassicQueueMode.Lazy = 1 -> RabbitMQ.AMQP.Client.ClassicQueueMode
RabbitMQ.AMQP.Client.ClassicQueueVersion
RabbitMQ.AMQP.Client.ClassicQueueVersion.V1 = 0 -> RabbitMQ.AMQP.Client.ClassicQueueVersion
RabbitMQ.AMQP.Client.ClassicQueueVersion.V2 = 1 -> RabbitMQ.AMQP.Client.ClassicQueueVersion
RabbitMQ.AMQP.Client.ClusterConnectionSettings
RabbitMQ.AMQP.Client.ClusterConnectionSettings.ClusterConnectionSettings(System.Collections.Generic.IEnumerable<System.Uri!>! uris, RabbitMQ.AMQP.Client.IUriSelector? uriSelector = null, string? containerId = null, RabbitMQ.AMQP.Client.SaslMechanism? saslMechanism = null, RabbitMQ.AMQP.Client.IRecoveryConfiguration? recoveryConfiguration = null, uint? maxFrameSize = null, RabbitMQ.AMQP.Client.TlsSettings? tlsSettings = null) -> void
RabbitMQ.AMQP.Client.ConnectionException
RabbitMQ.AMQP.Client.ConnectionException.ConnectionException(string! message) -> void
RabbitMQ.AMQP.Client.ConnectionException.ConnectionException(string! message, System.Exception! innerException) -> void
RabbitMQ.AMQP.Client.ConnectionSettings
RabbitMQ.AMQP.Client.ConnectionSettings.ConnectionSettings(string! scheme, string! host, int port, string? user = null, string? password = null, string? virtualHost = null, string! containerId = "", RabbitMQ.AMQP.Client.SaslMechanism? saslMechanism = null, RabbitMQ.AMQP.Client.IRecoveryConfiguration? recoveryConfiguration = null, uint? maxFrameSize = null, RabbitMQ.AMQP.Client.TlsSettings? tlsSettings = null) -> void
RabbitMQ.AMQP.Client.ConnectionSettings.ConnectionSettings(string? containerId = null, RabbitMQ.AMQP.Client.SaslMechanism? saslMechanism = null, RabbitMQ.AMQP.Client.IRecoveryConfiguration? recoveryConfiguration = null, uint? maxFrameSize = null, RabbitMQ.AMQP.Client.TlsSettings? tlsSettings = null) -> void
RabbitMQ.AMQP.Client.ConnectionSettings.ConnectionSettings(System.Uri! uri, string? containerId = null, RabbitMQ.AMQP.Client.SaslMechanism? saslMechanism = null, RabbitMQ.AMQP.Client.IRecoveryConfiguration? recoveryConfiguration = null, uint? maxFrameSize = null, RabbitMQ.AMQP.Client.TlsSettings? tlsSettings = null) -> void
RabbitMQ.AMQP.Client.ConnectionSettings.ContainerId.get -> string!
RabbitMQ.AMQP.Client.ConnectionSettings.Host.get -> string!
RabbitMQ.AMQP.Client.ConnectionSettings.MaxFrameSize.get -> uint
RabbitMQ.AMQP.Client.ConnectionSettings.Password.get -> string?
RabbitMQ.AMQP.Client.ConnectionSettings.Path.get -> string!
RabbitMQ.AMQP.Client.ConnectionSettings.Port.get -> int
RabbitMQ.AMQP.Client.ConnectionSettings.Recovery.get -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.ConnectionSettings.SaslMechanism.get -> RabbitMQ.AMQP.Client.SaslMechanism!
RabbitMQ.AMQP.Client.ConnectionSettings.Scheme.get -> string!
RabbitMQ.AMQP.Client.ConnectionSettings.TlsSettings.get -> RabbitMQ.AMQP.Client.TlsSettings?
RabbitMQ.AMQP.Client.ConnectionSettings.User.get -> string?
RabbitMQ.AMQP.Client.ConnectionSettings.UseSsl.get -> bool
RabbitMQ.AMQP.Client.ConnectionSettings.VirtualHost.get -> string!
RabbitMQ.AMQP.Client.ConnectionSettings._address -> Amqp.Address!
RabbitMQ.AMQP.Client.ConnectionSettings._virtualHost -> string!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Build() -> RabbitMQ.AMQP.Client.ConnectionSettings!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.ConnectionSettingsBuilder() -> void
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.ContainerId(string! containerId) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Host(string! host) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.MaxFrameSize(uint maxFrameSize) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Password(string! password) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Port(int port) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.RecoveryConfiguration(RabbitMQ.AMQP.Client.IRecoveryConfiguration! recoveryConfiguration) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.SaslMechanism(RabbitMQ.AMQP.Client.SaslMechanism! saslMechanism) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Scheme(string! scheme) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.TlsSettings(RabbitMQ.AMQP.Client.TlsSettings! tlsSettings) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Uri(System.Uri! uri) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Uris(System.Collections.Generic.IEnumerable<System.Uri!>! uris) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.UriSelector(RabbitMQ.AMQP.Client.IUriSelector! uriSelector) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.User(string! user) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.VirtualHost(string! virtualHost) -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
RabbitMQ.AMQP.Client.Consts
RabbitMQ.AMQP.Client.ConsumerException
RabbitMQ.AMQP.Client.ConsumerException.ConsumerException(string! message) -> void
RabbitMQ.AMQP.Client.Error
RabbitMQ.AMQP.Client.Error.Description.get -> string?
RabbitMQ.AMQP.Client.Error.Error(string? errorCode, string? description) -> void
RabbitMQ.AMQP.Client.Error.ErrorCode.get -> string?
RabbitMQ.AMQP.Client.ExchangeType
RabbitMQ.AMQP.Client.ExchangeType.DIRECT = 0 -> RabbitMQ.AMQP.Client.ExchangeType
RabbitMQ.AMQP.Client.ExchangeType.FANOUT = 1 -> RabbitMQ.AMQP.Client.ExchangeType
RabbitMQ.AMQP.Client.ExchangeType.HEADERS = 3 -> RabbitMQ.AMQP.Client.ExchangeType
RabbitMQ.AMQP.Client.ExchangeType.TOPIC = 2 -> RabbitMQ.AMQP.Client.ExchangeType
RabbitMQ.AMQP.Client.IAddressBuilder<T>
RabbitMQ.AMQP.Client.IAddressBuilder<T>.Exchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> T
RabbitMQ.AMQP.Client.IAddressBuilder<T>.Exchange(string! exchangeName) -> T
RabbitMQ.AMQP.Client.IAddressBuilder<T>.Key(string! key) -> T
RabbitMQ.AMQP.Client.IAddressBuilder<T>.Queue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> T
RabbitMQ.AMQP.Client.IAddressBuilder<T>.Queue(string! queueName) -> T
RabbitMQ.AMQP.Client.IBackOffDelayPolicy
RabbitMQ.AMQP.Client.IBackOffDelayPolicy.CurrentAttempt.get -> int
RabbitMQ.AMQP.Client.IBackOffDelayPolicy.Delay() -> int
RabbitMQ.AMQP.Client.IBackOffDelayPolicy.IsActive() -> bool
RabbitMQ.AMQP.Client.IBackOffDelayPolicy.Reset() -> void
RabbitMQ.AMQP.Client.IBindingSpecification
RabbitMQ.AMQP.Client.IBindingSpecification.Argument(string! key, object! value) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.Arguments(System.Collections.Generic.Dictionary<string!, object!>! arguments) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.BindAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.IBindingSpecification.BindingArguments.get -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.IBindingSpecification.BindingKey.get -> string!
RabbitMQ.AMQP.Client.IBindingSpecification.BindingPath.get -> string!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationExchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationExchange(string! exchangeName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationExchangeName.get -> string!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationQueue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationQueue(string! queueName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.DestinationQueueName.get -> string!
RabbitMQ.AMQP.Client.IBindingSpecification.Key(string! bindingKey) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.SourceExchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.SourceExchange(string! exchangeName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IBindingSpecification.SourceExchangeName.get -> string!
RabbitMQ.AMQP.Client.IBindingSpecification.UnbindAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.IClassicQueueSpecification
RabbitMQ.AMQP.Client.IClassicQueueSpecification.MaxPriority(int maxPriority) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.IClassicQueueSpecification.Mode(RabbitMQ.AMQP.Client.ClassicQueueMode mode) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.IClassicQueueSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IClassicQueueSpecification.Version(RabbitMQ.AMQP.Client.ClassicQueueVersion version) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.IConnection
RabbitMQ.AMQP.Client.IConnection.ConsumerBuilder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConnection.Consumers.get -> System.Collections.Generic.IEnumerable<RabbitMQ.AMQP.Client.IConsumer!>!
RabbitMQ.AMQP.Client.IConnection.Id.get -> long
RabbitMQ.AMQP.Client.IConnection.Id.set -> void
RabbitMQ.AMQP.Client.IConnection.Management() -> RabbitMQ.AMQP.Client.IManagement!
RabbitMQ.AMQP.Client.IConnection.Properties.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
RabbitMQ.AMQP.Client.IConnection.PublisherBuilder() -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.IConnection.Publishers.get -> System.Collections.Generic.IEnumerable<RabbitMQ.AMQP.Client.IPublisher!>!
RabbitMQ.AMQP.Client.IConnection.RpcClientBuilder() -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IConnection.RpcServerBuilder() -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IConsumer
RabbitMQ.AMQP.Client.IConsumer.Pause() -> void
RabbitMQ.AMQP.Client.IConsumer.Unpause() -> void
RabbitMQ.AMQP.Client.IConsumer.UnsettledMessageCount.get -> long
RabbitMQ.AMQP.Client.IConsumerBuilder
RabbitMQ.AMQP.Client.IConsumerBuilder.BuildAndStartAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConsumer!>!
RabbitMQ.AMQP.Client.IConsumerBuilder.InitialCredits(int initialCredits) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.AbsoluteExpiryTime(System.DateTime absoluteExpiryTime) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.ContentEncoding(string! contentEncoding) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.ContentType(string! contentType) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.CorrelationId(object! correlationId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.CreationTime(System.DateTime creationTime) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.GroupId(string! groupId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.GroupSequence(uint groupSequence) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.MessageId(object! id) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.Property(string! key, object! value) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.PropertySymbol(string! key, string! value) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.ReplyTo(string! replyTo) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.ReplyToGroupId(string! groupId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.Stream() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.Subject(string! subject) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.To(string! to) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions.UserId(byte[]! userId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Builder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Filter() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.FilterMatchUnfiltered(bool matchUnfiltered) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.FilterValues(params string![]! values) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Offset(long offset) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Offset(RabbitMQ.AMQP.Client.StreamOffsetSpecification specification) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Offset(string! interval) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions.Offset(System.DateTime timestamp) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.ListenerContext
RabbitMQ.AMQP.Client.IConsumerBuilder.ListenerContext.ListenerContext(RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions! streamOptions) -> void
RabbitMQ.AMQP.Client.IConsumerBuilder.ListenerContext.StreamOptions.get -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.MessageHandler(RabbitMQ.AMQP.Client.MessageHandler! handler) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConsumerBuilder.Queue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpecification) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConsumerBuilder.Queue(string! queueName) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IConsumerBuilder.Stream() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.IConsumerBuilder.SubscriptionListener(System.Action<RabbitMQ.AMQP.Client.IConsumerBuilder.ListenerContext!>! listenerContext) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.IContext
RabbitMQ.AMQP.Client.IContext.Accept() -> void
RabbitMQ.AMQP.Client.IContext.Discard() -> void
RabbitMQ.AMQP.Client.IContext.Discard(System.Collections.Generic.Dictionary<string!, object!>! annotations) -> void
RabbitMQ.AMQP.Client.IContext.Requeue() -> void
RabbitMQ.AMQP.Client.IContext.Requeue(System.Collections.Generic.Dictionary<string!, object!>! annotations) -> void
RabbitMQ.AMQP.Client.IEntityInfo
RabbitMQ.AMQP.Client.IEntityInfoSpecification<T>
RabbitMQ.AMQP.Client.IEntityInfoSpecification<T>.DeclareAsync() -> System.Threading.Tasks.Task<T>!
RabbitMQ.AMQP.Client.IEntityInfoSpecification<T>.DeleteAsync() -> System.Threading.Tasks.Task<T>!
RabbitMQ.AMQP.Client.IEntitySpecification
RabbitMQ.AMQP.Client.IEntitySpecification.DeclareAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.IEntitySpecification.DeleteAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.IEnvironment
RabbitMQ.AMQP.Client.IEnvironment.CloseAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.IEnvironment.CreateConnectionAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.IEnvironment.CreateConnectionAsync(RabbitMQ.AMQP.Client.ConnectionSettings! connectionSettings) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.IEnvironment.GetConnections() -> System.Collections.ObjectModel.ReadOnlyCollection<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.IExchangeSpecification
RabbitMQ.AMQP.Client.IExchangeSpecification.Argument(string! key, object! value) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IExchangeSpecification.Arguments(System.Collections.Generic.Dictionary<string!, object!>! arguments) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IExchangeSpecification.AutoDelete(bool isAutoDelete) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IExchangeSpecification.ExchangeArguments.get -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.IExchangeSpecification.ExchangeName.get -> string!
RabbitMQ.AMQP.Client.IExchangeSpecification.ExchangeType.get -> string!
RabbitMQ.AMQP.Client.IExchangeSpecification.IsAutoDelete.get -> bool
RabbitMQ.AMQP.Client.IExchangeSpecification.Name(string! exchangeName) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IExchangeSpecification.Type(RabbitMQ.AMQP.Client.ExchangeType exchangeType) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IExchangeSpecification.Type(string! exchangeType) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.ILifeCycle
RabbitMQ.AMQP.Client.ILifeCycle.ChangeState -> RabbitMQ.AMQP.Client.LifeCycleCallBack!
RabbitMQ.AMQP.Client.ILifeCycle.CloseAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.ILifeCycle.State.get -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.IManagement
RabbitMQ.AMQP.Client.IManagement.Binding() -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.IManagement.Exchange() -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IManagement.Exchange(string! name) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.IManagement.GetQueueInfoAsync(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.IManagement.GetQueueInfoAsync(string! queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.IManagement.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IManagement.Queue(string! name) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IMessage
RabbitMQ.AMQP.Client.IMessage.AbsoluteExpiryTime() -> System.DateTime
RabbitMQ.AMQP.Client.IMessage.AbsoluteExpiryTime(System.DateTime absoluteExpiryTime) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.Annotation(string! key) -> object!
RabbitMQ.AMQP.Client.IMessage.Annotation(string! key, object! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.Body() -> object!
RabbitMQ.AMQP.Client.IMessage.Body(object! body) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.ContentEncoding() -> string!
RabbitMQ.AMQP.Client.IMessage.ContentEncoding(string! contentEncoding) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.ContentType() -> string!
RabbitMQ.AMQP.Client.IMessage.ContentType(string! contentType) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.CorrelationId() -> object!
RabbitMQ.AMQP.Client.IMessage.CorrelationId(object! id) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.CreationTime() -> System.DateTime
RabbitMQ.AMQP.Client.IMessage.CreationTime(System.DateTime creationTime) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.GroupId() -> string!
RabbitMQ.AMQP.Client.IMessage.GroupId(string! groupId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.GroupSequence() -> uint
RabbitMQ.AMQP.Client.IMessage.GroupSequence(uint groupSequence) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.MessageId() -> object!
RabbitMQ.AMQP.Client.IMessage.MessageId(object! messageId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.Properties() -> System.Collections.Generic.IDictionary<object!, object!>!
RabbitMQ.AMQP.Client.IMessage.Property(string! key) -> object!
RabbitMQ.AMQP.Client.IMessage.Property(string! key, object! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.PropertySymbol(string! key, string! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.ReplyTo() -> string!
RabbitMQ.AMQP.Client.IMessage.ReplyTo(string! replyTo) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.ReplyToGroupId() -> string!
RabbitMQ.AMQP.Client.IMessage.ReplyToGroupId(string! replyToGroupId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.Subject() -> string!
RabbitMQ.AMQP.Client.IMessage.Subject(string! subject) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.To() -> string!
RabbitMQ.AMQP.Client.IMessage.To(string! to) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessage.ToAddress() -> RabbitMQ.AMQP.Client.IMessageAddressBuilder!
RabbitMQ.AMQP.Client.IMessage.UserId() -> byte[]!
RabbitMQ.AMQP.Client.IMessage.UserId(byte[]! userId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMessageAddressBuilder
RabbitMQ.AMQP.Client.IMessageAddressBuilder.Build() -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IMetricsReporter
RabbitMQ.AMQP.Client.IMetricsReporter.ConnectionClosed() -> void
RabbitMQ.AMQP.Client.IMetricsReporter.ConnectionOpened() -> void
RabbitMQ.AMQP.Client.IMetricsReporter.Consumed(System.TimeSpan elapsed) -> void
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDisposition(RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue disposition) -> void
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue.ACCEPTED = 0 -> RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue.DISCARDED = 1 -> RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue.REQUEUED = 2 -> RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumerClosed() -> void
RabbitMQ.AMQP.Client.IMetricsReporter.ConsumerOpened() -> void
RabbitMQ.AMQP.Client.IMetricsReporter.PublishDisposition(RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue disposition) -> void
RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue.ACCEPTED = 0 -> RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue.REJECTED = 1 -> RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue.RELEASED = 2 -> RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue
RabbitMQ.AMQP.Client.IMetricsReporter.Published(System.TimeSpan elapsed) -> void
RabbitMQ.AMQP.Client.IMetricsReporter.PublisherClosed() -> void
RabbitMQ.AMQP.Client.IMetricsReporter.PublisherOpened() -> void
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.AbstractLifeCycle() -> void
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.ChangeState -> RabbitMQ.AMQP.Client.LifeCycleCallBack?
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.Dispose() -> void
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.OnNewStatus(RabbitMQ.AMQP.Client.State newState, RabbitMQ.AMQP.Client.Error? error) -> void
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.State.get -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.ThrowIfClosed() -> void
RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle._disposed -> bool
RabbitMQ.AMQP.Client.Impl.AbstractReconnectLifeCycle
RabbitMQ.AMQP.Client.Impl.AbstractReconnectLifeCycle.AbstractReconnectLifeCycle() -> void
RabbitMQ.AMQP.Client.Impl.AddressBuilder
RabbitMQ.AMQP.Client.Impl.AddressBuilder.AddressBuilder() -> void
RabbitMQ.AMQP.Client.Impl.AddressBuilderHelper
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.AmqpBindingSpecification(RabbitMQ.AMQP.Client.Impl.AmqpManagement! management) -> void
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.Argument(string! key, object! value) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.Arguments(System.Collections.Generic.Dictionary<string!, object!>! arguments) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.BindAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.BindingArguments.get -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.BindingKey.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.BindingPath.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationExchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationExchange(string! exchangeName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationExchangeName.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationQueue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationQueue(string! queueName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.DestinationQueueName.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.Key(string! bindingKey) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.SourceExchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.SourceExchange(string! exchangeName) -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.SourceExchangeName.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpBindingSpecification.UnbindAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification.AmqpClassicSpecification(RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification! parent) -> void
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification.MaxPriority(int maxPriority) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification.Mode(RabbitMQ.AMQP.Client.ClassicQueueMode mode) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpClassicSpecification.Version(RabbitMQ.AMQP.Client.ClassicQueueVersion version) -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpConnection
RabbitMQ.AMQP.Client.Impl.AmqpConnection.ConsumerBuilder() -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Consumers.get -> System.Collections.Generic.IEnumerable<RabbitMQ.AMQP.Client.IConsumer!>!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Id.get -> long
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Id.set -> void
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Management() -> RabbitMQ.AMQP.Client.IManagement!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Properties.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.PublisherBuilder() -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.Publishers.get -> System.Collections.Generic.IEnumerable<RabbitMQ.AMQP.Client.IPublisher!>!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.RpcClientBuilder() -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConnection.RpcServerBuilder() -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConsumer
RabbitMQ.AMQP.Client.Impl.AmqpConsumer.Pause() -> void
RabbitMQ.AMQP.Client.Impl.AmqpConsumer.Unpause() -> void
RabbitMQ.AMQP.Client.Impl.AmqpConsumer.UnsettledMessageCount.get -> long
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.AmqpConsumerBuilder(RabbitMQ.AMQP.Client.Impl.AmqpConnection! connection, RabbitMQ.AMQP.Client.IMetricsReporter? metricsReporter) -> void
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.BuildAndStartAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConsumer!>!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.InitialCredits(int initialCredits) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.MessageHandler(RabbitMQ.AMQP.Client.MessageHandler! handler) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.Queue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.Queue(string! queueName) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.Stream() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.AmqpConsumerBuilder.SubscriptionListener(System.Action<RabbitMQ.AMQP.Client.IConsumerBuilder.ListenerContext!>! context) -> RabbitMQ.AMQP.Client.IConsumerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpEnvironment
RabbitMQ.AMQP.Client.Impl.AmqpEnvironment.CloseAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.Impl.AmqpEnvironment.CreateConnectionAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.Impl.AmqpEnvironment.CreateConnectionAsync(RabbitMQ.AMQP.Client.ConnectionSettings! connectionSettings) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.Impl.AmqpEnvironment.GetConnections() -> System.Collections.ObjectModel.ReadOnlyCollection<RabbitMQ.AMQP.Client.IConnection!>!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.AmqpExchangeSpecification(RabbitMQ.AMQP.Client.Impl.AmqpManagement! management) -> void
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.Argument(string! key, object! value) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.Arguments(System.Collections.Generic.Dictionary<string!, object!>! arguments) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.AutoDelete(bool autoDelete) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.DeclareAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.DeleteAsync() -> System.Threading.Tasks.Task!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.ExchangeArguments.get -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.ExchangeName.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.ExchangeType.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.IsAutoDelete.get -> bool
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.Name(string! name) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.Type(RabbitMQ.AMQP.Client.ExchangeType exchangeType) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpExchangeSpecification.Type(string! exchangeType) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpManagement
RabbitMQ.AMQP.Client.Impl.AmqpManagement.Binding() -> RabbitMQ.AMQP.Client.IBindingSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.Exchange() -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.Exchange(string! name) -> RabbitMQ.AMQP.Client.IExchangeSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.GetQueueInfoAsync(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.GetQueueInfoAsync(string! queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpManagement.Queue(string! name) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpMessage
RabbitMQ.AMQP.Client.Impl.AmqpMessage.AbsoluteExpiryTime() -> System.DateTime
RabbitMQ.AMQP.Client.Impl.AmqpMessage.AbsoluteExpiryTime(System.DateTime absoluteExpiryTime) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.AmqpMessage() -> void
RabbitMQ.AMQP.Client.Impl.AmqpMessage.AmqpMessage(Amqp.Message! nativeMessage) -> void
RabbitMQ.AMQP.Client.Impl.AmqpMessage.AmqpMessage(object! body) -> void
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Annotation(string! key) -> object!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Annotation(string! key, object! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Body() -> object!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Body(object! body) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ContentEncoding() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ContentEncoding(string! contentEncoding) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ContentType() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ContentType(string! contentType) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.CorrelationId() -> object!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.CorrelationId(object! id) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.CreationTime() -> System.DateTime
RabbitMQ.AMQP.Client.Impl.AmqpMessage.CreationTime(System.DateTime creationTime) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.GroupId() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.GroupId(string! groupId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.GroupSequence() -> uint
RabbitMQ.AMQP.Client.Impl.AmqpMessage.GroupSequence(uint groupSequence) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.MessageId() -> object!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.MessageId(object! id) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.NativeMessage.get -> Amqp.Message!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Properties() -> System.Collections.Generic.IDictionary<object!, object!>!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Property(string! key) -> object!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Property(string! key, object! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.PropertySymbol(string! key, string! value) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ReplyTo() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ReplyTo(string! id) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ReplyToGroupId() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ReplyToGroupId(string! replyToGroupId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Subject() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.Subject(string! subject) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.To() -> string!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.To(string! id) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.ToAddress() -> RabbitMQ.AMQP.Client.IMessageAddressBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.UserId() -> byte[]!
RabbitMQ.AMQP.Client.Impl.AmqpMessage.UserId(byte[]! userId) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.AmqpNotOpenException
RabbitMQ.AMQP.Client.Impl.AmqpNotOpenException.AmqpNotOpenException(string! message) -> void
RabbitMQ.AMQP.Client.Impl.AmqpPublisher
RabbitMQ.AMQP.Client.Impl.AmqpPublisher.AmqpPublisher(RabbitMQ.AMQP.Client.Impl.AmqpConnection! connection, string? address, RabbitMQ.AMQP.Client.IMetricsReporter? metricsReporter) -> void
RabbitMQ.AMQP.Client.Impl.AmqpPublisher.PublishAsync(RabbitMQ.AMQP.Client.IMessage! message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.PublishResult!>!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.AmqpPublisherBuilder(RabbitMQ.AMQP.Client.Impl.AmqpConnection! connection, RabbitMQ.AMQP.Client.IMetricsReporter? metricsReporter) -> void
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.BuildAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IPublisher!>!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.Exchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.Exchange(string! exchangeName) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.Key(string! key) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.PublishTimeout(System.TimeSpan timeout) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.Queue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpPublisherBuilder.Queue(string! queueName) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.AmqpQueueSpecification(RabbitMQ.AMQP.Client.Impl.AmqpManagement! management) -> void
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Arguments(System.Collections.Generic.Dictionary<object!, object!>! queueArguments) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.AutoDelete(bool isAutoDelete) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Classic() -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.DeadLetterExchange(string! dlx) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.DeadLetterRoutingKey(string! dlrk) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.DeclareAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.DeleteAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IQueueInfo!>!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Exclusive(bool isExclusive) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Expires(System.TimeSpan expiration) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.IsAutoDelete.get -> bool
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.IsExclusive.get -> bool
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.MaxLength(long maxLength) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.MaxLengthBytes(RabbitMQ.AMQP.Client.ByteCapacity! maxLengthBytes) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.MessageTtl(System.TimeSpan ttl) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Name(string! queueName) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.OverflowStrategy(RabbitMQ.AMQP.Client.OverFlowStrategy overflow) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.PurgeAsync() -> System.Threading.Tasks.Task<ulong>!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.QueueArguments.get -> System.Collections.Generic.Dictionary<object!, object!>!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.QueueName.get -> string!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.QueueType.get -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Quorum() -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.SingleActiveConsumer(bool singleActiveConsumer) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Stream() -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification.Type(RabbitMQ.AMQP.Client.QueueType queueType) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification.AmqpQuorumSpecification(RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification! parent) -> void
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification.DeadLetterStrategy(RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy strategy) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification.DeliveryLimit(int limit) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpQuorumSpecification.QuorumInitialGroupSize(int size) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClient
RabbitMQ.AMQP.Client.Impl.AmqpRpcClient.AmqpRpcClient(RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration! configuration) -> void
RabbitMQ.AMQP.Client.Impl.AmqpRpcClient.PublishAsync(RabbitMQ.AMQP.Client.IMessage! message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IMessage!>!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.AmqpRpcClientBuilder(RabbitMQ.AMQP.Client.Impl.AmqpConnection! connection) -> void
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.BuildAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IRpcClient!>!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.CorrelationIdExtractor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>? correlationIdExtractor) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.CorrelationIdSupplier(System.Func<object!>? correlationIdSupplier) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.ReplyToQueue(RabbitMQ.AMQP.Client.IQueueSpecification! replyToQueue) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.ReplyToQueue(string! replyToQueueName) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.RequestAddress() -> RabbitMQ.AMQP.Client.IRpcClientAddressBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.RequestPostProcessor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>? requestPostProcessor) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder.Timeout(System.TimeSpan timeout) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServer
RabbitMQ.AMQP.Client.Impl.AmqpRpcServer.AmqpRpcServer(RabbitMQ.AMQP.Client.Impl.RpcConfiguration! configuration) -> void
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.AmqpRpcServerBuilder(RabbitMQ.AMQP.Client.Impl.AmqpConnection! connection) -> void
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.BuildAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IRpcServer!>!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.CorrelationIdExtractor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>? correlationIdExtractor) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.Handler(RabbitMQ.AMQP.Client.RpcHandler! handler) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.ReplyPostProcessor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>? replyPostProcessor) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.RequestQueue(RabbitMQ.AMQP.Client.IQueueSpecification! requestQueue) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpRpcServerBuilder.RequestQueue(string! requestQueue) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification.AmqpStreamSpecification(RabbitMQ.AMQP.Client.Impl.AmqpQueueSpecification! parent) -> void
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification.InitialClusterSize(int initialClusterSize) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification.MaxAge(System.TimeSpan maxAge) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification.MaxSegmentSizeBytes(RabbitMQ.AMQP.Client.ByteCapacity! maxSegmentSize) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.Impl.AmqpStreamSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.Impl.BindingSpecification
RabbitMQ.AMQP.Client.Impl.BindingSpecification.ArgsToMap() -> Amqp.Types.Map!
RabbitMQ.AMQP.Client.Impl.BindingSpecification.BindingSpecification() -> void
RabbitMQ.AMQP.Client.Impl.BindingSpecification._arguments -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.Impl.BindingSpecification._destinationName -> string!
RabbitMQ.AMQP.Client.Impl.BindingSpecification._routingKey -> string!
RabbitMQ.AMQP.Client.Impl.BindingSpecification._sourceName -> string!
RabbitMQ.AMQP.Client.Impl.BindingSpecification._toQueue -> bool
RabbitMQ.AMQP.Client.Impl.ConsumerBuilderStreamOptions
RabbitMQ.AMQP.Client.Impl.ConsumerBuilderStreamOptions.ConsumerBuilderStreamOptions(RabbitMQ.AMQP.Client.IConsumerBuilder! consumerBuilder, Amqp.Types.Map! filters, bool areFilterExpressionsSupported) -> void
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Address() -> string!
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.DefaultAddressBuilder() -> void
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Exchange(RabbitMQ.AMQP.Client.IExchangeSpecification! exchangeSpec) -> T
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Exchange(string? exchangeName) -> T
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Key(string? key) -> T
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Queue(RabbitMQ.AMQP.Client.IQueueSpecification! queueSpec) -> T
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>.Queue(string? queueName) -> T
RabbitMQ.AMQP.Client.Impl.DefaultAddressBuilder<T>._owner -> T?
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Arguments() -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.AutoDelete() -> bool
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.ConsumerCount() -> uint
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Durable() -> bool
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Exclusive() -> bool
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Leader() -> string!
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Members() -> System.Collections.Generic.List<string!>!
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.MessageCount() -> ulong
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Name() -> string!
RabbitMQ.AMQP.Client.Impl.DefaultQueueInfo.Type() -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.Impl.FieldNotSetException
RabbitMQ.AMQP.Client.Impl.FieldNotSetException.FieldNotSetException() -> void
RabbitMQ.AMQP.Client.Impl.InvalidCodeException
RabbitMQ.AMQP.Client.Impl.InvalidCodeException.InvalidCodeException(string! message) -> void
RabbitMQ.AMQP.Client.Impl.ListenerStreamOptions
RabbitMQ.AMQP.Client.Impl.ListenerStreamOptions.ListenerStreamOptions(Amqp.Types.Map! filters, bool areFilterExpressionsSupported) -> void
RabbitMQ.AMQP.Client.Impl.MessageAddressBuilder
RabbitMQ.AMQP.Client.Impl.MessageAddressBuilder.Build() -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.Impl.MessageAddressBuilder.MessageAddressBuilder(RabbitMQ.AMQP.Client.IMessage! message) -> void
RabbitMQ.AMQP.Client.Impl.RpcClientAddressBuilder
RabbitMQ.AMQP.Client.Impl.RpcClientAddressBuilder.RpcClient() -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.Impl.RpcClientAddressBuilder.RpcClientAddressBuilder(RabbitMQ.AMQP.Client.Impl.AmqpRpcClientBuilder! builder) -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.Connection.get -> RabbitMQ.AMQP.Client.Impl.AmqpConnection!
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.Connection.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.CorrelationIdExtractor.get -> System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>?
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.CorrelationIdExtractor.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.CorrelationIdSupplier.get -> System.Func<object!>?
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.CorrelationIdSupplier.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.ReplyToQueue.get -> string!
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.ReplyToQueue.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.RequestAddress.get -> string!
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.RequestAddress.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.RequestPostProcessor.get -> System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>?
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.RequestPostProcessor.set -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.RpcClientConfiguration() -> void
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.Timeout.get -> System.TimeSpan
RabbitMQ.AMQP.Client.Impl.RpcClientConfiguration.Timeout.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.Connection.get -> RabbitMQ.AMQP.Client.Impl.AmqpConnection!
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.Connection.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.CorrelationIdExtractor.get -> System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>?
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.CorrelationIdExtractor.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.Handler.get -> RabbitMQ.AMQP.Client.RpcHandler?
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.Handler.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.ReplyPostProcessor.get -> System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>?
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.ReplyPostProcessor.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.RequestQueue.get -> string!
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.RequestQueue.set -> void
RabbitMQ.AMQP.Client.Impl.RpcConfiguration.RpcConfiguration() -> void
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.AbsoluteExpiryTime(System.DateTime absoluteExpiryTime) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.ContentEncoding(string! contentEncoding) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.ContentType(string! contentType) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.CorrelationId(object! correlationId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.CreationTime(System.DateTime creationTime) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.GroupId(string! groupId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.GroupSequence(uint groupSequence) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.MessageId(object! id) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.Property(string! key, object! value) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.PropertySymbol(string! key, string! value) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.ReplyTo(string! replyTo) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.ReplyToGroupId(string! groupId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.Stream() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.StreamFilterOptions(RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions! streamOptions, Amqp.Types.Map! filters) -> void
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.Subject(string! subject) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.To(string! to) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamFilterOptions.UserId(byte[]! userId) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions
RabbitMQ.AMQP.Client.Impl.StreamOptions.Filter() -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamFilterOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.FilterMatchUnfiltered(bool matchUnfiltered) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.FilterValues(params string![]! values) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.Offset(long offset) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.Offset(RabbitMQ.AMQP.Client.StreamOffsetSpecification specification) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.Offset(string! interval) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.Offset(System.DateTime timestamp) -> RabbitMQ.AMQP.Client.IConsumerBuilder.IStreamOptions!
RabbitMQ.AMQP.Client.Impl.StreamOptions.StreamOptions(Amqp.Types.Map! filters, bool areFilterExpressionsSupported) -> void
RabbitMQ.AMQP.Client.InternalBugException
RabbitMQ.AMQP.Client.InternalBugException.InternalBugException() -> void
RabbitMQ.AMQP.Client.InternalBugException.InternalBugException(string! message) -> void
RabbitMQ.AMQP.Client.InvalidAddressException
RabbitMQ.AMQP.Client.InvalidAddressException.InvalidAddressException(string! message) -> void
RabbitMQ.AMQP.Client.IPublisher
RabbitMQ.AMQP.Client.IPublisher.PublishAsync(RabbitMQ.AMQP.Client.IMessage! message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.PublishResult!>!
RabbitMQ.AMQP.Client.IPublisherBuilder
RabbitMQ.AMQP.Client.IPublisherBuilder.BuildAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IPublisher!>!
RabbitMQ.AMQP.Client.IPublisherBuilder.PublishTimeout(System.TimeSpan timeout) -> RabbitMQ.AMQP.Client.IPublisherBuilder!
RabbitMQ.AMQP.Client.IQueueInfo
RabbitMQ.AMQP.Client.IQueueInfo.Arguments() -> System.Collections.Generic.Dictionary<string!, object!>!
RabbitMQ.AMQP.Client.IQueueInfo.AutoDelete() -> bool
RabbitMQ.AMQP.Client.IQueueInfo.ConsumerCount() -> uint
RabbitMQ.AMQP.Client.IQueueInfo.Durable() -> bool
RabbitMQ.AMQP.Client.IQueueInfo.Exclusive() -> bool
RabbitMQ.AMQP.Client.IQueueInfo.Leader() -> string!
RabbitMQ.AMQP.Client.IQueueInfo.Members() -> System.Collections.Generic.List<string!>!
RabbitMQ.AMQP.Client.IQueueInfo.MessageCount() -> ulong
RabbitMQ.AMQP.Client.IQueueInfo.Name() -> string!
RabbitMQ.AMQP.Client.IQueueInfo.Type() -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.IQueueSpecification
RabbitMQ.AMQP.Client.IQueueSpecification.Arguments(System.Collections.Generic.Dictionary<object!, object!>! queueArguments) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.AutoDelete(bool isAutoDelete) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Classic() -> RabbitMQ.AMQP.Client.IClassicQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.DeadLetterExchange(string! dlx) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.DeadLetterRoutingKey(string! dlrk) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Exclusive(bool isExclusive) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Expires(System.TimeSpan expiration) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.IsAutoDelete.get -> bool
RabbitMQ.AMQP.Client.IQueueSpecification.IsExclusive.get -> bool
RabbitMQ.AMQP.Client.IQueueSpecification.MaxLength(long maxLength) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.MaxLengthBytes(RabbitMQ.AMQP.Client.ByteCapacity! maxLengthBytes) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.MessageTtl(System.TimeSpan ttl) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Name(string! queueName) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.OverflowStrategy(RabbitMQ.AMQP.Client.OverFlowStrategy overflow) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.PurgeAsync() -> System.Threading.Tasks.Task<ulong>!
RabbitMQ.AMQP.Client.IQueueSpecification.QueueArguments.get -> System.Collections.Generic.Dictionary<object!, object!>!
RabbitMQ.AMQP.Client.IQueueSpecification.QueueName.get -> string!
RabbitMQ.AMQP.Client.IQueueSpecification.QueueType.get -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.IQueueSpecification.Quorum() -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.SingleActiveConsumer(bool singleActiveConsumer) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Stream() -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.IQueueSpecification.Type(RabbitMQ.AMQP.Client.QueueType queueType) -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQuorumQueueSpecification
RabbitMQ.AMQP.Client.IQuorumQueueSpecification.DeadLetterStrategy(RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy strategy) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.IQuorumQueueSpecification.DeliveryLimit(int limit) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.IQuorumQueueSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IQuorumQueueSpecification.QuorumInitialGroupSize(int size) -> RabbitMQ.AMQP.Client.IQuorumQueueSpecification!
RabbitMQ.AMQP.Client.IRecoveryConfiguration
RabbitMQ.AMQP.Client.IRecoveryConfiguration.Activated(bool activated) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.IRecoveryConfiguration.BackOffDelayPolicy(RabbitMQ.AMQP.Client.IBackOffDelayPolicy! backOffDelayPolicy) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.IRecoveryConfiguration.GetBackOffDelayPolicy() -> RabbitMQ.AMQP.Client.IBackOffDelayPolicy!
RabbitMQ.AMQP.Client.IRecoveryConfiguration.IsActivated() -> bool
RabbitMQ.AMQP.Client.IRecoveryConfiguration.IsTopologyActive() -> bool
RabbitMQ.AMQP.Client.IRecoveryConfiguration.Topology(bool activated) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.IRpcClient
RabbitMQ.AMQP.Client.IRpcClient.PublishAsync(RabbitMQ.AMQP.Client.IMessage! message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IMessage!>!
RabbitMQ.AMQP.Client.IRpcClientAddressBuilder
RabbitMQ.AMQP.Client.IRpcClientAddressBuilder.RpcClient() -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder
RabbitMQ.AMQP.Client.IRpcClientBuilder.BuildAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IRpcClient!>!
RabbitMQ.AMQP.Client.IRpcClientBuilder.CorrelationIdExtractor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>? correlationIdExtractor) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.CorrelationIdSupplier(System.Func<object!>? correlationIdSupplier) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.ReplyToQueue(RabbitMQ.AMQP.Client.IQueueSpecification! replyToQueue) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.ReplyToQueue(string! replyToQueueName) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.RequestAddress() -> RabbitMQ.AMQP.Client.IRpcClientAddressBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.RequestPostProcessor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>? requestPostProcessor) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcClientBuilder.Timeout(System.TimeSpan timeout) -> RabbitMQ.AMQP.Client.IRpcClientBuilder!
RabbitMQ.AMQP.Client.IRpcServer
RabbitMQ.AMQP.Client.IRpcServer.IContext
RabbitMQ.AMQP.Client.IRpcServer.IContext.Message(object! body) -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.IRpcServerBuilder
RabbitMQ.AMQP.Client.IRpcServerBuilder.BuildAsync() -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IRpcServer!>!
RabbitMQ.AMQP.Client.IRpcServerBuilder.CorrelationIdExtractor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!>? correlationIdExtractor) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IRpcServerBuilder.Handler(RabbitMQ.AMQP.Client.RpcHandler! handler) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IRpcServerBuilder.ReplyPostProcessor(System.Func<RabbitMQ.AMQP.Client.IMessage!, object!, RabbitMQ.AMQP.Client.IMessage!>? replyPostProcessor) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IRpcServerBuilder.RequestQueue(RabbitMQ.AMQP.Client.IQueueSpecification! requestQueue) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IRpcServerBuilder.RequestQueue(string! requestQueue) -> RabbitMQ.AMQP.Client.IRpcServerBuilder!
RabbitMQ.AMQP.Client.IStreamSpecification
RabbitMQ.AMQP.Client.IStreamSpecification.InitialClusterSize(int initialClusterSize) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.IStreamSpecification.MaxAge(System.TimeSpan maxAge) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.IStreamSpecification.MaxSegmentSizeBytes(RabbitMQ.AMQP.Client.ByteCapacity! maxSegmentSize) -> RabbitMQ.AMQP.Client.IStreamSpecification!
RabbitMQ.AMQP.Client.IStreamSpecification.Queue() -> RabbitMQ.AMQP.Client.IQueueSpecification!
RabbitMQ.AMQP.Client.IUriSelector
RabbitMQ.AMQP.Client.IUriSelector.Select(System.Collections.Generic.ICollection<System.Uri!>! uris) -> System.Uri!
RabbitMQ.AMQP.Client.LifeCycleCallBack
RabbitMQ.AMQP.Client.MessageHandler
RabbitMQ.AMQP.Client.MetricsReporter
RabbitMQ.AMQP.Client.MetricsReporter.ConnectionClosed() -> void
RabbitMQ.AMQP.Client.MetricsReporter.ConnectionOpened() -> void
RabbitMQ.AMQP.Client.MetricsReporter.Consumed(System.TimeSpan elapsed) -> void
RabbitMQ.AMQP.Client.MetricsReporter.ConsumeDisposition(RabbitMQ.AMQP.Client.IMetricsReporter.ConsumeDispositionValue disposition) -> void
RabbitMQ.AMQP.Client.MetricsReporter.ConsumerClosed() -> void
RabbitMQ.AMQP.Client.MetricsReporter.ConsumerOpened() -> void
RabbitMQ.AMQP.Client.MetricsReporter.MetricsReporter(System.Diagnostics.Metrics.IMeterFactory! meterFactory) -> void
RabbitMQ.AMQP.Client.MetricsReporter.PublishDisposition(RabbitMQ.AMQP.Client.IMetricsReporter.PublishDispositionValue disposition) -> void
RabbitMQ.AMQP.Client.MetricsReporter.Published(System.TimeSpan elapsed) -> void
RabbitMQ.AMQP.Client.MetricsReporter.PublisherClosed() -> void
RabbitMQ.AMQP.Client.MetricsReporter.PublisherOpened() -> void
RabbitMQ.AMQP.Client.ModelException
RabbitMQ.AMQP.Client.ModelException.ModelException(string! message) -> void
RabbitMQ.AMQP.Client.OutcomeState
RabbitMQ.AMQP.Client.OutcomeState.Accepted = 0 -> RabbitMQ.AMQP.Client.OutcomeState
RabbitMQ.AMQP.Client.OutcomeState.Rejected = 1 -> RabbitMQ.AMQP.Client.OutcomeState
RabbitMQ.AMQP.Client.OutcomeState.Released = 2 -> RabbitMQ.AMQP.Client.OutcomeState
RabbitMQ.AMQP.Client.OverFlowStrategy
RabbitMQ.AMQP.Client.OverFlowStrategy.DropHead = 0 -> RabbitMQ.AMQP.Client.OverFlowStrategy
RabbitMQ.AMQP.Client.OverFlowStrategy.RejectPublish = 1 -> RabbitMQ.AMQP.Client.OverFlowStrategy
RabbitMQ.AMQP.Client.OverFlowStrategy.RejectPublishDlx = 2 -> RabbitMQ.AMQP.Client.OverFlowStrategy
RabbitMQ.AMQP.Client.PreconditionFailedException
RabbitMQ.AMQP.Client.PreconditionFailedException.PreconditionFailedException(string! message) -> void
RabbitMQ.AMQP.Client.PublisherException
RabbitMQ.AMQP.Client.PublisherException.PublisherException(string! message) -> void
RabbitMQ.AMQP.Client.PublishOutcome
RabbitMQ.AMQP.Client.PublishOutcome.Error.get -> RabbitMQ.AMQP.Client.Error?
RabbitMQ.AMQP.Client.PublishOutcome.PublishOutcome(RabbitMQ.AMQP.Client.OutcomeState state, RabbitMQ.AMQP.Client.Error? error) -> void
RabbitMQ.AMQP.Client.PublishOutcome.State.get -> RabbitMQ.AMQP.Client.OutcomeState
RabbitMQ.AMQP.Client.PublishResult
RabbitMQ.AMQP.Client.PublishResult.Message.get -> RabbitMQ.AMQP.Client.IMessage!
RabbitMQ.AMQP.Client.PublishResult.Outcome.get -> RabbitMQ.AMQP.Client.PublishOutcome!
RabbitMQ.AMQP.Client.PublishResult.PublishResult(RabbitMQ.AMQP.Client.IMessage! message, RabbitMQ.AMQP.Client.PublishOutcome! outcome) -> void
RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.QueueType.CLASSIC = 1 -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.QueueType.QUORUM = 0 -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.QueueType.STREAM = 2 -> RabbitMQ.AMQP.Client.QueueType
RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy
RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy.AtLeastOnce = 1 -> RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy
RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy.AtMostOnce = 0 -> RabbitMQ.AMQP.Client.QuorumQueueDeadLetterStrategy
RabbitMQ.AMQP.Client.RandomUriSelector
RabbitMQ.AMQP.Client.RandomUriSelector.RandomUriSelector() -> void
RabbitMQ.AMQP.Client.RandomUriSelector.Select(System.Collections.Generic.ICollection<System.Uri!>! uris) -> System.Uri!
RabbitMQ.AMQP.Client.RecoveryConfiguration
RabbitMQ.AMQP.Client.RecoveryConfiguration.Activated(bool activated) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.RecoveryConfiguration.BackOffDelayPolicy(RabbitMQ.AMQP.Client.IBackOffDelayPolicy! backOffDelayPolicy) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.RecoveryConfiguration.GetBackOffDelayPolicy() -> RabbitMQ.AMQP.Client.IBackOffDelayPolicy!
RabbitMQ.AMQP.Client.RecoveryConfiguration.IsActivated() -> bool
RabbitMQ.AMQP.Client.RecoveryConfiguration.IsTopologyActive() -> bool
RabbitMQ.AMQP.Client.RecoveryConfiguration.RecoveryConfiguration() -> void
RabbitMQ.AMQP.Client.RecoveryConfiguration.Topology(bool activated) -> RabbitMQ.AMQP.Client.IRecoveryConfiguration!
RabbitMQ.AMQP.Client.RpcHandler
RabbitMQ.AMQP.Client.SaslMechanism
RabbitMQ.AMQP.Client.SaslMechanism.Equals(RabbitMQ.AMQP.Client.SaslMechanism? other) -> bool
RabbitMQ.AMQP.Client.SaslMechanism.Mechanism.get -> string!
RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.State.Closed = 3 -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.State.Closing = 2 -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.State.Open = 0 -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.State.Reconnecting = 1 -> RabbitMQ.AMQP.Client.State
RabbitMQ.AMQP.Client.StreamOffsetSpecification
RabbitMQ.AMQP.Client.StreamOffsetSpecification.First = 0 -> RabbitMQ.AMQP.Client.StreamOffsetSpecification
RabbitMQ.AMQP.Client.StreamOffsetSpecification.Last = 1 -> RabbitMQ.AMQP.Client.StreamOffsetSpecification
RabbitMQ.AMQP.Client.StreamOffsetSpecification.Next = 2 -> RabbitMQ.AMQP.Client.StreamOffsetSpecification
RabbitMQ.AMQP.Client.TlsSettings
RabbitMQ.AMQP.Client.TlsSettings.AcceptablePolicyErrors.get -> System.Net.Security.SslPolicyErrors
RabbitMQ.AMQP.Client.TlsSettings.AcceptablePolicyErrors.set -> void
RabbitMQ.AMQP.Client.TlsSettings.CheckCertificateRevocation.get -> bool
RabbitMQ.AMQP.Client.TlsSettings.CheckCertificateRevocation.set -> void
RabbitMQ.AMQP.Client.TlsSettings.ClientCertificates.get -> System.Security.Cryptography.X509Certificates.X509CertificateCollection!
RabbitMQ.AMQP.Client.TlsSettings.LocalCertificateSelectionCallback.get -> System.Net.Security.LocalCertificateSelectionCallback?
RabbitMQ.AMQP.Client.TlsSettings.LocalCertificateSelectionCallback.set -> void
RabbitMQ.AMQP.Client.TlsSettings.Protocols.get -> System.Security.Authentication.SslProtocols
RabbitMQ.AMQP.Client.TlsSettings.Protocols.set -> void
RabbitMQ.AMQP.Client.TlsSettings.RemoteCertificateValidationCallback.get -> System.Net.Security.RemoteCertificateValidationCallback?
RabbitMQ.AMQP.Client.TlsSettings.RemoteCertificateValidationCallback.set -> void
RabbitMQ.AMQP.Client.TlsSettings.TlsSettings() -> void
RabbitMQ.AMQP.Client.TlsSettings.TlsSettings(System.Security.Authentication.SslProtocols protocols) -> void
static RabbitMQ.AMQP.Client.ByteCapacity.B(long bytes) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.explicit operator RabbitMQ.AMQP.Client.ByteCapacity!(string! value) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.Gb(long gigabytes) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.implicit operator long(RabbitMQ.AMQP.Client.ByteCapacity! value) -> long
static RabbitMQ.AMQP.Client.ByteCapacity.Kb(long kilobytes) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.Mb(long megabytes) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.Parse(string! value) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ByteCapacity.Tb(long terabytes) -> RabbitMQ.AMQP.Client.ByteCapacity!
static RabbitMQ.AMQP.Client.ConnectionSettings.ProcessUriSegmentsForVirtualHost(System.Uri! uri) -> string!
static RabbitMQ.AMQP.Client.ConnectionSettings.ProcessUserInfo(System.Uri! uri) -> (string? user, string? password)
static RabbitMQ.AMQP.Client.ConnectionSettingsBuilder.Create() -> RabbitMQ.AMQP.Client.ConnectionSettingsBuilder!
static RabbitMQ.AMQP.Client.Impl.AddressBuilderHelper.AddressBuilder() -> RabbitMQ.AMQP.Client.Impl.AddressBuilder!
static RabbitMQ.AMQP.Client.Impl.AmqpConnection.CreateAsync(RabbitMQ.AMQP.Client.ConnectionSettings! connectionSettings, RabbitMQ.AMQP.Client.IMetricsReporter? metricsReporter = null) -> System.Threading.Tasks.Task<RabbitMQ.AMQP.Client.IConnection!>!
static RabbitMQ.AMQP.Client.Impl.AmqpEnvironment.Create(RabbitMQ.AMQP.Client.ConnectionSettings! connectionSettings, RabbitMQ.AMQP.Client.IMetricsReporter? metricsReporter = null) -> RabbitMQ.AMQP.Client.IEnvironment!
static RabbitMQ.AMQP.Client.InternalBugException.CreateAndThrow(string! message) -> void
static readonly RabbitMQ.AMQP.Client.SaslMechanism.Anonymous -> RabbitMQ.AMQP.Client.SaslMechanism!
static readonly RabbitMQ.AMQP.Client.SaslMechanism.External -> RabbitMQ.AMQP.Client.SaslMechanism!
static readonly RabbitMQ.AMQP.Client.SaslMechanism.Plain -> RabbitMQ.AMQP.Client.SaslMechanism!
virtual RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.Dispose(bool disposing) -> void
virtual RabbitMQ.AMQP.Client.Impl.AbstractLifeCycle.OpenAsync() -> System.Threading.Tasks.Task!
